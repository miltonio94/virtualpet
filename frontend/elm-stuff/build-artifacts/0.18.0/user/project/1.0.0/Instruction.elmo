var _user$project$Instruction$selectedInstructionToString = function (i) {
	var _p0 = i;
	switch (_p0.ctor) {
		case 'Forward':
			return _elm_lang$core$Basics$toString(i);
		case 'TurnRight':
			return _elm_lang$core$Basics$toString(i);
		case 'TurnLeft':
			return _elm_lang$core$Basics$toString(i);
		case 'Backward':
			return _elm_lang$core$Basics$toString(i);
		case 'Noise':
			return _elm_lang$core$Basics$toString(i);
		default:
			return _elm_lang$core$Basics$toString(i);
	}
};
var _user$project$Instruction$instruction = F2(
	function (i, amount) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('instruction'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					_user$project$Instruction$selectedInstructionToString(i)),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$br,
						{ctor: '[]'},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_elm_lang$core$Basics$toString(amount)),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _user$project$Instruction$bookends = function (a) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('bookends'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$p,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(a),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Instruction$Instruction = F2(
	function (a, b) {
		return {selectedInstruction: a, amount: b};
	});
var _user$project$Instruction$NotSelected = {ctor: 'NotSelected'};
var _user$project$Instruction$defaultInstruction = {selectedInstruction: _user$project$Instruction$NotSelected, amount: 0};
var _user$project$Instruction$update = F2(
	function (msg, model) {
		var _p1 = msg;
		if (_p1.ctor === 'NewInstruction') {
			return model;
		} else {
			return A2(
				_elm_lang$core$List$append,
				model,
				{
					ctor: '::',
					_0: _user$project$Instruction$defaultInstruction,
					_1: {ctor: '[]'}
				});
		}
	});
var _user$project$Instruction$Noise = {ctor: 'Noise'};
var _user$project$Instruction$Backward = {ctor: 'Backward'};
var _user$project$Instruction$TurnLeft = {ctor: 'TurnLeft'};
var _user$project$Instruction$TurnRight = {ctor: 'TurnRight'};
var _user$project$Instruction$Forward = {ctor: 'Forward'};
var _user$project$Instruction$AddInstruction = {ctor: 'AddInstruction'};
var _user$project$Instruction$NewInstruction = function (a) {
	return {ctor: 'NewInstruction', _0: a};
};
var _user$project$Instruction$radio = F2(
	function (name, selected) {
		return A2(
			_elm_lang$html$Html$label,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$input,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$type_('radio'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(
								_user$project$Instruction$NewInstruction(_user$project$Instruction$defaultInstruction)),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$checked(selected),
								_1: {ctor: '[]'}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text(name),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$br,
							{ctor: '[]'},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _user$project$Instruction$selectedInstructionToRadios = F2(
	function (i, amount) {
		var _p2 = i;
		switch (_p2.ctor) {
			case 'Forward':
				return A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(_user$project$Instruction$radio, 'Forward', true),
						_1: {
							ctor: '::',
							_0: A2(_user$project$Instruction$radio, 'Turn Right', false),
							_1: {
								ctor: '::',
								_0: A2(_user$project$Instruction$radio, 'Turn Left', false),
								_1: {
									ctor: '::',
									_0: A2(_user$project$Instruction$radio, 'Backward', false),
									_1: {
										ctor: '::',
										_0: A2(_user$project$Instruction$radio, 'Noise', false),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												_elm_lang$core$Basics$toString(amount)),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					});
			case 'TurnRight':
				return A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(_user$project$Instruction$radio, 'Forward', false),
						_1: {
							ctor: '::',
							_0: A2(_user$project$Instruction$radio, 'TurnRight', true),
							_1: {
								ctor: '::',
								_0: A2(_user$project$Instruction$radio, 'TurnLeft', false),
								_1: {
									ctor: '::',
									_0: A2(_user$project$Instruction$radio, 'Backward', false),
									_1: {
										ctor: '::',
										_0: A2(_user$project$Instruction$radio, 'Noise', false),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												_elm_lang$core$Basics$toString(amount)),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					});
			case 'TurnLeft':
				return A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(_user$project$Instruction$radio, 'Forward', false),
						_1: {
							ctor: '::',
							_0: A2(_user$project$Instruction$radio, 'TurnRight', false),
							_1: {
								ctor: '::',
								_0: A2(_user$project$Instruction$radio, 'TurnLeft', true),
								_1: {
									ctor: '::',
									_0: A2(_user$project$Instruction$radio, 'Backward', false),
									_1: {
										ctor: '::',
										_0: A2(_user$project$Instruction$radio, 'Noise', false),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												_elm_lang$core$Basics$toString(amount)),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					});
			case 'Backward':
				return A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(_user$project$Instruction$radio, 'Forward', false),
						_1: {
							ctor: '::',
							_0: A2(_user$project$Instruction$radio, 'TurnRight', false),
							_1: {
								ctor: '::',
								_0: A2(_user$project$Instruction$radio, 'TurnLeft', false),
								_1: {
									ctor: '::',
									_0: A2(_user$project$Instruction$radio, 'Backward', true),
									_1: {
										ctor: '::',
										_0: A2(_user$project$Instruction$radio, 'Noise', false),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												_elm_lang$core$Basics$toString(amount)),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					});
			case 'Noise':
				return A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(_user$project$Instruction$radio, 'Forward', false),
						_1: {
							ctor: '::',
							_0: A2(_user$project$Instruction$radio, 'TurnRight', false),
							_1: {
								ctor: '::',
								_0: A2(_user$project$Instruction$radio, 'TurnLeft', false),
								_1: {
									ctor: '::',
									_0: A2(_user$project$Instruction$radio, 'Backward', false),
									_1: {
										ctor: '::',
										_0: A2(_user$project$Instruction$radio, 'Noise', true),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												_elm_lang$core$Basics$toString(amount)),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					});
			default:
				return A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(_user$project$Instruction$radio, 'Forward', false),
						_1: {
							ctor: '::',
							_0: A2(_user$project$Instruction$radio, 'TurnRight', false),
							_1: {
								ctor: '::',
								_0: A2(_user$project$Instruction$radio, 'TurnLeft', false),
								_1: {
									ctor: '::',
									_0: A2(_user$project$Instruction$radio, 'Backward', false),
									_1: {
										ctor: '::',
										_0: A2(_user$project$Instruction$radio, 'Noise', false),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												_elm_lang$core$Basics$toString(amount)),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					});
		}
	});
var _user$project$Instruction$instructionsFromModel = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		A2(
			_elm_lang$core$List$map,
			function (x) {
				return A2(_user$project$Instruction$selectedInstructionToRadios, x.selectedInstruction, x.amount);
			},
			model));
};
var _user$project$Instruction$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('content'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _user$project$Instruction$bookends('Start'),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('instructionSet'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$form,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _user$project$Instruction$instructionsFromModel(model),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$button,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(_user$project$Instruction$AddInstruction),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('new instruction'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: _user$project$Instruction$bookends('Finish'),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Instruction$main = _elm_lang$html$Html$beginnerProgram(
	{
		model: {
			ctor: '::',
			_0: _user$project$Instruction$defaultInstruction,
			_1: {ctor: '[]'}
		},
		view: _user$project$Instruction$view,
		update: _user$project$Instruction$update
	})();
